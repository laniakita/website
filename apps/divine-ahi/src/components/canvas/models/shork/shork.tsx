/* eslint-disable react/no-unknown-property -- jsx-eslint hostilities */
/* eslint-disable @typescript-eslint/no-shadow -- three.js instances */
/*

Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Kaine_G (https://sketchfab.com/Kaine_G)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/blahaj-ce981de49111488c81ea646067abe1ec
Title: Blahaj
*/

import { type Mesh, type MeshStandardMaterial } from 'three';
import React, { useRef, useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged, Wireframe } from '@react-three/drei';
import { type GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Low_poly_blahaj1_Shark_0: Mesh;
    Low_poly_blahaj1_teef_0: Mesh;
  };
  materials: {
    Shark: MeshStandardMaterial;
    teef: MeshStandardMaterial;
  };
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;

const context = createContext({} as ContextType);
export function ShorkInstances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/assets/models/blahaj-transformed.glb') as GLTFResult;
  const instances = useMemo(
    () => ({
      LowpolyblahajShark: nodes.Low_poly_blahaj1_Shark_0,
      Lowpolyblahajteef: nodes.Low_poly_blahaj1_teef_0,
    }),
    [nodes],
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances}>{children}</context.Provider>}
    </Merged>
  );
}

export function Shork(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null}>

      {/* @ts-expect-error -- instances */}
      <instances.LowpolyblahajShark position={[0, 0, 0.001]} rotation={[0, 0.71, 0]} scale={0.01} />
      {/* @ts-expect-error -- instances */}
      <instances.Lowpolyblahajteef position={[0, 0, 0.001]} rotation={[0, 0.71, 0]} scale={0.01} />
    </group>
  );
}

export function WireShork2({ ...props }) {
  const { nodes } = useGLTF('/assets/models/blahaj-transformed.glb') as GLTFResult;
  const group = useRef(null!);

  return (
    <group ref={group} {...props}>
      <mesh
        position={[0, 0, 0.001]}
        rotation={[0, 0.71, 0]}
        scale={0.01}
        geometry={nodes.Low_poly_blahaj1_teef_0.geometry}
      >
        <Wireframe stroke="green" fillMix={1.0} fillOpacity={0.0} backfaceStroke="green" />
      </mesh>
      <mesh
        position={[0, 0, 0.001]}
        rotation={[0, 0.71, 0]}
        scale={0.01}
        geometry={nodes.Low_poly_blahaj1_Shark_0.geometry}
      >
        <Wireframe stroke="green" fillMix={1.0} fillOpacity={0.0} backfaceStroke="green" />
      </mesh>
    </group>
  );
}

useGLTF.preload('/assets/models/blahaj-transformed.glb');
