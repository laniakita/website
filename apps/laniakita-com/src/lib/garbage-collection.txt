  /*  

/*
export const queryPostMetasBun = async (): Promise<QueryPostMetaItem[] | undefined> => {
  try {
    const postRes = await maindb.query.posts.findMany({
      orderBy: [desc(posts.date)],
      columns: {
        authorId: false,
        featuredImageId: false,
        rawStr: false,
      },
      with: {
        author: {
          columns: {
            name: true,
          },
        },
        postToTags: {
          columns: {
            tagId: false,
            postId: false,
          },
          with: {
            tag: {
              columns: {
                slug: true,
                title: true,
                id: true,
              },
            },
          },
        },
        featuredImage: {
          columns: {
            fileLocation: true,
            altText: true,
            blur: true,
            height: true,
            width: true,
          },
        },
      },
    });
    const finalRes = postRes.map((post) => {
      const tagsOne = post.postToTags.map((tagsObj) => {
        const slug = tagsObj.tag.slug;
        const title = tagsObj.tag.title;
        const id = tagsObj.tag.id;

        return { slug, title, id };
      });
      delete (post as unknown as { postToTags: Record<string, unknown> | undefined }).postToTags;
      return { ...post, tags: tagsOne };
    });
    //console.dir(finalRes, { depth: null });
    return finalRes;
  } catch (err) {
    console.error("Couldn't fetch posts!", err);
  }
};
*/
  
  const postsRes = await maindb.query.posts.findMany({
    columns: {
      rawStr: false,
    },
    orderBy: [desc(posts.date)],
  });

  const translatedRes = Promise.all(postsRes.map(async (post) => {
    const authorName = await getAuthorFromID(post.authorId);
    const imageLocation = await get
  }))

  return postsArr;
  */
