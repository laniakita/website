name: Production Build Action
run-name: ${{github.actor}} is building for production
on: 
  push:
    branches:
      - production
permissions:
  id-token: write
  contents: read
env:
  CLOUDFLARE_DEFAULT_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
jobs:
  SST-Deploy-Production:
    if: ${{ github.ref == 'refs/heads/production' }}
    environment: production
    runs-on: ubuntu-latest
    steps:
      # info
      - run: echo "Deploying to production on branch ${{ github.ref_name }}"
      - run: echo "Build triggered by ${{ github.event_name }}"
      - run: echo "Building on ${{ runner.os }}"

      # fetch repo
      - name: Check out code
        uses: actions/checkout@v2
      - run: echo "Checked out ${{ github.repository }}"

      # aws
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true
    
      - name: Add AWS profile to ~/.aws/credentials
        run: |
          aws configure set region ${{ secrets.AWS_REGION }} --profile lani-production
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile lani-production
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile lani-production
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile lani-production

      # nodejs
      - name: nodejs
        uses: actions/setup-node@v4
        with: 
          node-version: '22.14.0'

      # install bun
      - run: npm install --global bun

      # install packages
      - name: install packages
        run: bun install

      # ROTFB
      - name: Deploy
        run: bun sst deploy --stage production --verbose
        timeout-minutes: 30
